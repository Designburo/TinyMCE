== PageForms.php ==

@@ -124,6 +124,7 @@ $GLOBALS['wgHooks']['ParserFirstCallInit'][] = 'PFHooks::registerFunctions';
 $GLOBALS['wgHooks']['MakeGlobalVariablesScript'][] = 'PFHooks::setGlobalJSVariables';
 $GLOBALS['wgHooks']['PageSchemasRegisterHandlers'][] = 'PFPageSchemas::registerClass';
 $GLOBALS['wgHooks']['EditPage::importFormData'][] = 'PFHooks::showFormPreview';
+$GLOBALS['wgHooks']['TinyMCEDisable'][] = 'PFHooks::disableTinyMCE';
 $GLOBALS['wgHooks']['CanonicalNamespaces'][] = 'PFHooks::registerNamespaces';
 $GLOBALS['wgHooks']['UnitTestsList'][] = 'PFHooks::onUnitTestsList';
 $GLOBALS['wgHooks']['ResourceLoaderRegisterModules'][] = 'PFHooks::registerModules';

== extension.json ==

@@ -425,6 +425,7 @@
                "EditPage::importFormData": [
                        "PFHooks::showFormPreview"
                ],
+               "TinyMCEDisable": "PFHooks::disableTinyMCE",
                "CanonicalNamespaces": [
                        "PFHooks::registerNamespaces"
                ],

== includes/PF_Hooks.php ==

@@ -231,6 +231,21 @@ class PFHooks {
                return true;
        }

+        public static function disableTinyMCE( $title ) {
+               if ( $title->getNamespace() == PF_NS_FORM ) {
+                       return false;
+               }
+
+               $defaultForms = PFFormLinker::getDefaultFormsForPage( $title );
+               if ( count( $defaultForms ) > 0 ) {
+                       return false;
+               }
+
+                return true;
+        }
+
        public static function showFormPreview( EditPage $editpage, WebRequest $request ) {
                global $wgOut, $wgParser, $wgPageFormsFormPrinter;

== includes/forminputs/PF_TextAreaInput.php ==

@@ -56,6 +56,16 @@ class PFTextAreaInput extends PFFormInput {
 			$this->mEditor = 'wikieditor';
 			$this->addJsInitFunctionData( 'window.ext.wikieditor.init' );
 		}
+
+		if (
+			array_key_exists( 'editor', $this->mOtherArgs ) &&
+			$this->mOtherArgs['editor'] == 'tinymce'
+		) {
+			$this->mEditor = 'tinymce';
+			global $wgTinyMCEEnabled;
+			$wgTinyMCEEnabled = true;
+			$newClasses = 'mceMinimizeOnBlur';
+			if ( $input_name != 'pf_free_text' && !array_key_exists( 'isSection', $this->mOtherArgs ) ) {
+				$newClasses .= ' mcePartOfTemplate';
+			}
+			if ( array_key_exists( 'class', $this->mOtherArgs ) ) {
+				$this->mOtherArgs['class'] .= ' ' . $newClasses;
+			} else {
+				$this->mOtherArgs['class'] = $newClasses;
+			}
+		}
 	}
 
 	public static function getName() {
@@ -140,6 +150,8 @@ class PFTextAreaInput extends PFFormInput {
 	public function getResourceModuleNames() {
 		if ( $this->mEditor == 'wikieditor' ) {
 			return 'ext.pageforms.wikieditor';
+		} elseif ( $this->mEditor == 'tinymce' ) {
+			return 'ext.tinymce';
 		} else {
 			return null;
 		}
@@ -165,6 +177,8 @@ class PFTextAreaInput extends PFFormInput {
 			$editPage = new EditPage( $article );
 			WikiEditorHooks::editPageShowEditFormInitial( $editPage, $wgOut );
 			$className = 'wikieditor ';
+		} elseif ( $this->mEditor == 'tinymce' ) {
+			$className = 'tinymce ';
 		} else {
 			$className = '';
 		}
